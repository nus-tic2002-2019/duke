Hello from
 ____        _        
|  _ \ _   _| | _____ 
| | | | | | | |/ / _ \
| |_| | |_| |   <  __/
|____/ \__,_|_|\_\___|
What can I do for you?
Type "Help" for list of helpful commands!

Type something: 



Type something: todo do a catch up with james
_______________________
Added: [T] [✘] do a catch up with james
Now you have 26 tasks in the list.

Type something: Event Reservist /at Tue 0900
_______________________
Added: [E] [✘] Reservist (at: Nov 19 2019 09:00 AM)
Now you have 22 tasks in the list.

Deadline Module 123 report /by 2019-11-30 2359
_______________________
Added: [D] [✘] Module 123 report (by: Nov 30 2019 11:59 PM)
Now you have 23 tasks in the list.

Type something: list
_______________________
Task Number 1: [T] [✓] sleep
Task Number 2: [E] [✘] lunch with friends (at: Nov 18 2019)
Task Number 3: [E] [✘] Dinner with Family (at: Nov 18 2019)
Task Number 4: [E] [✘] Work (at: Nov 18 2019)
Task Number 5: [E] [✘] Seminar (at: Nov 18 2019 11:12 PM)
Task Number 6: [D] [✓] Duke (by: Nov 18 2019)
Task Number 7: [D] [✘] LMS (by: Nov 18 2019 12:00 AM)
Task Number 8: [D] [✘] Video for Duke (by: Nov 18 2019 11:59 PM)
Task Number 9: [E] [✘] Friendly talk (at: Nov 18 2019 11:11 AM)
Task Number 10: [T] [✘] sleep early
Task Number 11: [T] [✓] shop for a new fan
Task Number 12: [E] [✘] Go online shopping with 12/12 sales (at: Dec 12 2019 12:00 AM)
Task Number 13: [D] [✘] online sales ending (by: Dec 12 2019 11:59 PM)
Task Number 14: [T] [✓] play games
Task Number 15: [E] [✘] monday sales (at: Nov 18 2019 12:00 PM)
Task Number 16: [T] [✘] go outside and exercise
Task Number 17: [E] [✘] running club (at: Nov 18 2019)
Task Number 18: [E] [✘] swimming club (at: Dec 1 2019 01:00 PM)
Task Number 19: [D] [✘] duke (by: Nov 17 2019)
Task Number 20: [E] [✘] go out (at: Dec 12 2019)
Task Number 21: [T] [✘] o a catch up with John
Task Number 22: [E] [✘] Reservist (at: Nov 19 2019 09:00 AM)
Task Number 23: [D] [✘] Module 123 report (by: Nov 30 2019 11:59 PM)

Type something: done 23
_______________________
Nice! I've marked this task as done: 
Task Number 23: [D] [✓] Module 123 report (by: Nov 30 2019 11:59 PM)


Type something: delete 21
_______________________
I have deleted the following: 
[T] [✘] o a catch up with John
Now you have 25 tasks in the list.
_______________________


Type something: todo
_______________________
WE GOT AN ERROR: Todo command can't be empty



Type something: event buy a new phone /at xxxx
_______________________
WE GOT AN ERROR: Please state date


Type something: Do
_______________________
WE GOT AN ERROR: Unknown command! Please type 'help' for list of command!


1 | T | 1 | sleep
2 | E | 0 | lunch with friends | 2019-11-18
3 | E | 0 | Dinner with Family | 2019-11-18
4 | E | 0 | Work | 2019-11-18
5 | E | 0 | Seminar | 2019-11-18 23:12
6 | D | 1 | Duke | 2019-11-18


Type something: find sales
_______________________
1. Task number 12: [E] [✘] Go online shopping with 12/12 sales (at: Dec 12 2019 12:00 AM)
2. Task number 13: [D] [✘] online sales ending (by: Dec 12 2019 11:59 PM)
3. Task number 15: [E] [✘] monday sales (at: Nov 18 2019 12:00 PM)


Type something: schedule 2019-12-12
_______________________
The Deadline for 2019-12-12 are as following: 
1. [D] [✘] Phone bills (by: Dec 12 2019 01:00 PM)
2. [D] [✘] online sales ending (by: Dec 12 2019 11:59 PM)

The Event Schedule for 2019-12-12 are as following: 
1. [E] [✘] Go online shopping with 12/12 sales (at: Dec 12 2019 12:00 AM)
2. [E] [✘] go school (at: Dec 12 2019 09:00 AM)
3. [E] [✘] running by MBS (at: Dec 12 2019 06:00 PM)

The Event for 2019-12-12 without a time are as following: 
1. [E] [✘] go out (at: Dec 12 2019)


public class ParserTest {

    @Test
    public void ParserDateTest1() throws DukeException {
        LocalDate d1 = Parser.convertStringToDate("2020-12-12");
        LocalDate d2 = Parser.convertStringToDate("2019-12-12");

        assertEquals("2020-12-12", d1.toString());
        assertEquals("2019-12-12", d2.toString());
    }

    @Test
    public void ParserTimeTest1() throws DukeException {
        LocalTime t1 = Parser.convertStringToTime("1000");
        LocalTime t2 = Parser.convertStringToTime("10:00");

        assertEquals("10:00", t1.toString());
        assertEquals("10:00", t2.toString());
        assertEquals("10:00 AM", t2.format(DateTimeFormatter.ofPattern("hh:mm a")));
    }
}


public class DeadlinesTest {

    @Test
    public void DeadlinesTest1() {

        LocalDate d1 = LocalDate.parse("2019-12-12");
        LocalTime t1 = LocalTime.parse("10:00");
        Deadlines dead1 = new Deadlines("Phone bills", d1);
        Deadlines dead2 = new Deadlines("Duke", d1, t1);

        assertEquals("[D] [✘] Phone bills (at: Dec 12 2019)", dead1.toString());
        assertEquals("[D] [✘] Duke (at: Dec 12 2019 10:00 AM)", dead2.toString());
        assertEquals("Dec 12 2019", dead1.getDateTimeStringFormat());
        assertEquals("Dec 12 2019 10:00 AM", dead2.getDateTimeStringFormat());
        assertEquals("2019-12-12", dead1.getDateTimeString());
        assertEquals("2019-12-12 10:00", dead2.getDateTimeString());

    }
}


	Events event = eventTimeSetter(taskDes, taskDateTime);
        assert event.getTaskType() == TaskType.EVENTS; //Checking whether the task has been created as a event before adding and saving

	Deadlines deadline = deadlineTimeSetter(taskDes, taskDateTime);
        assert deadline.getTaskType() == TaskType.DEADLINES;